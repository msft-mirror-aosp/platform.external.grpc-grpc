%YAML 1.2
--- |
  # THIS FILE IS FOR USE BY THE ANDROID EMULATOR CMAKE BUILD
  # ========================================================
  # This currently builds C and C++ code.
  # This file has been automatically generated from a template file.
  # Please look at the templates directory instead.
  # This file can be regenerated from the template by running
  # tools/buildgen/generate_projects.sh
  #
  #
  # Copyright 2019 android emulator authors.
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  <%!

  import re

  proto_re = re.compile('(.*)\\.proto')

  def proto_replace_ext(filename, ext):
      m = proto_re.match(filename)
      if not m:
        return filename
      return '${_gRPC_PROTO_GENS_DIR}/' + m.group(1) + ext

  def get_deps(target_dict):
    deps = []
    if target_dict.get('baselib', False) or target_dict['name'] == 'address_sorting':
      deps.append("${_gRPC_BASELIB_LIBRARIES}")
    if target_dict.get('build', None) in ['protoc']:
      deps.append("libprotoc")
    if target_dict.get('secure', False):
      deps.append("ssl")
      deps.append("crypto")
    if target_dict.language == 'c++':
      deps.append("${_gRPC_PROTOBUF_LIBRARIES}")
    if target_dict['name'] in ['grpc', 'grpc_cronet', 'grpc_unsecure']:
      deps.append("zlib")
      deps.append("cares")
      deps.append("address_sorting")
    deps.append("${_gRPC_ALLTARGETS_LIBRARIES}")
    for d in target_dict.get('deps', []):
      if d == 'benchmark':
        deps.append("${_gRPC_BENCHMARK_LIBRARIES}")
      else:
        deps.append(d)
    if target_dict.build == 'test' and target_dict.language == 'c++':
      deps.append("${_gRPC_GFLAGS_LIBRARIES}")
    return deps

  def get_platforms_condition_begin(platforms):
    if all(platform in platforms for platform in ['linux', 'mac', 'posix', 'windows']):
      return ''
    cond = ' OR '.join(['_gRPC_PLATFORM_%s' % platform.upper() for platform in platforms])
    return 'if(%s)\n' % cond

  def get_platforms_condition_end(platforms):
    if not get_platforms_condition_begin(platforms):
      return ''
    return 'endif()\n'
  %>
  cmake_minimum_required(VERSION 3.5)
  # Make sure android build extensions are available.
  include(android)

  set(PACKAGE_NAME      "grpc")
  set(PACKAGE_VERSION   "${settings.cpp_version}")
  set(PACKAGE_STRING    "<%text>${PACKAGE_NAME} ${PACKAGE_VERSION}</%text>")
  set(PACKAGE_TARNAME   "<%text>${PACKAGE_NAME}-${PACKAGE_VERSION}</%text>")
  set(PACKAGE_BUGREPORT "https://github.com/grpc/grpc/issues/")

  # Options
  option(gRPC_BUILD_TESTS "Build tests" OFF)
  set(gRPC_BUILD_CODEGEN <%text>${gRPC_BUILD_TESTS}</%text>)

  if(LINUX_X86_64)
     set(_gRPC_PLATFORM_LINUX ON)
     set(_gRPC_PLATFORM_POSIX ON)
  elseif(DARWIN_X86_64)
     set(_gRPC_PLATFORM_MAC ON)
     set(_gRPC_PLATFORM_POSIX ON)
  else()
   set(_gRPC_PLATFORM_WINDOWS ON)
  endif()

  get_filename_component(_gRPC_ROOT "<%text>${CMAKE_CURRENT_LIST_DIR}/..</%text>" ABSOLUTE)

  # Make sure we have the protobuf client libraries
  if (NOT TARGET libprotobuf)
    message(STATUS "Including protobuf")
    add_subdirectory(<%text>${ANDROID_QEMU2_TOP_DIR}/android/third_party/protobuf/</%text> protobuf)
  endif()
  set(_gRPC_PROTOBUF_LIBRARIES libprotobuf)

  # Make sure we have the crypto & ssl libraries
  if (NOT TARGET ssl)
    message(STATUS "Including boring ssl")
    add_subdirectory(<%text>${ANDROID_QEMU2_TOP_DIR}/android/third_party/boringssl/</%text> boringssl)
  endif()
  get_target_property(_gRPC_SSL_INCLUDE_DIR ssl INTERFACE_INCLUDE_DIRECTORIES)

  # Make sure we have ssl/crypto
  if (NOT TARGET ssl)
    add_subdirectory(<%text>${ANDROID_QEMU2_TOP_DIR}/android/third_party/boringssl</%text> boringssl)
  endif()
  # Extract the include directories we need for gtest
  set(_gRPC_GTEST_INCLUDE_DIR <%text>${ANDROID_QEMU2_TOP_DIR}/../googletest/googletest/include</%text>)


  # Make sure we have the protoc plugin available.
  <%text>android_compile_for_host(grpc_cpp_plugin ${CMAKE_CURRENT_LIST_DIR}/plugins GRPC_CPP_PLUGIN_EXE)</%text>
  set(_gRPC_CPP_PLUGIN_EXECUTABLE <%text>${GRPC_CPP_PLUGIN_EXE}</%text> CACHE PATH "Grpc cpp plugin" FORCE)
  set(_gRPC_PROTOBUF_PROTOC_EXECUTABLE <%text>${PROTOBUF_PROTOC_EXECUTABLE}</%text> CACHE PATH "Protocol buffer executable" FORCE)
  add_subdirectory("<%text>${ANDROID_QEMU2_TOP_DIR}</%text>/../cares" cares)
  set(_gRPC_ADDRESS_SORTING_INCLUDE_DIR "<%text>${_gRPC_ROOT}/third_party/address_sorting/include</%text>")
  set(_gRPC_NANOPB_INCLUDE_DIR "<%text>${_gRPC_ROOT}/third_party/nanopb</%text>")
  set(_gRPC_PROTOBUF_INCLUDE_DIR "<%text>${ANDROID_QEMU2_TOP_DIR}/../protobuf</%text>;<%text>${ANDROID_QEMU2_TOP_DIR}/../protobuf/src</%text>")

  if(_gRPC_PLATFORM_MAC)
    set(_gRPC_ALLTARGETS_LIBRARIES  m pthread)
  elseif(_gRPC_PLATFORM_LINUX)
    set(_gRPC_ALLTARGETS_LIBRARIES  rt m pthread)
  endif()

  if(_gRPC_PLATFORM_WINDOWS)
    set(_gRPC_BASELIB_LIBRARIES  ws2_32::ws2_32)
  endif()

  # Create directory for generated .proto files
  set(_gRPC_PROTO_GENS_DIR <%text>${CMAKE_CURRENT_BINARY_DIR}/gens</%text>)
  file(MAKE_DIRECTORY <%text>${_gRPC_PROTO_GENS_DIR}</%text>)

  #  protobuf_generate_grpc_cpp
  #  --------------------------
  #
  #   Add custom commands to process ``.proto`` files to C++ using protoc and
  #   GRPC plugin::
  #
  #     protobuf_generate_grpc_cpp [<ARGN>...]
  #
  #   ``SOURCE_DIR``
  #      Root directory where sources can be found, defaults to CMAKE_CURRENT_SOURCE_DIR
  #   ``OUTPUT_DIR``
  #      Directory where the generated sources will be placed, defaults to CMAKE_CURRENT_BINARY_DIR/gens
  #   ``GENERATED``
  #      Variable that should contain the list of generated sources.
  #   ``SOURCES``
  #     ``.proto`` files
  #
  function(protobuf_generate_grpc_cpp)
    # Parse arguments
    set(options)
    set(oneValueArgs SOURCE_DIR OUTPUT_DIR GENERATED)
    set(multiValueArgs SOURCES)
    cmake_parse_arguments(grpc "<%text>${options}</%text>"
                               "<%text>${oneValueArgs}</%text>"
                               "<%text>${multiValueArgs}</%text>"
                               <%text>${ARGN}</%text>)

    set(_gRPC_PROTOBUF_INCLUDE "-I<%text>${ANDROID_QEMU2_TOP_DIR}/../protobuf/src</%text>")
    if (NOT grpc_OUTPUT_DIR)
        set(grpc_OUTPUT_DIR <%text>${_gRPC_PROTO_GENS_DIR}</%text>)
    endif()
    if (NOT grpc_SOURCE_DIR)
        set(grpc_SOURCE_DIR <%text>${CMAKE_CURRENT_SOURCE_DIR}</%text>)
    endif()
    if(NOT grpc_SOURCES)
      message(SEND_ERROR "Error: PROTOBUF_GENERATE_GRPC_CPP() called without any proto files")
      return()
    endif()
    set(GRPC_PROTO_GEN "")
    foreach(FIL <%text>${grpc_SOURCES}</%text>)
      get_filename_component(ABS_FIL <%text>${FIL}</%text> ABSOLUTE)
      get_filename_component(FIL_WE <%text>${FIL}</%text> NAME_WE)
      file(RELATIVE_PATH REL_FIL <%text>${grpc_SOURCE_DIR}</%text> <%text>${ABS_FIL}</%text>)
      get_filename_component(REL_DIR <%text>${REL_FIL}</%text> DIRECTORY)
      set(RELFIL_WE "<%text>${REL_DIR}/${FIL_WE}</%text>")

      add_custom_command(
        OUTPUT <%text>"${grpc_OUTPUT_DIR}/${RELFIL_WE}.grpc.pb.cc"</%text>
               <%text>"${grpc_OUTPUT_DIR}/${RELFIL_WE}.grpc.pb.h"</%text>
               <%text>"${grpc_OUTPUT_DIR}/${RELFIL_WE}_mock.grpc.pb.h"</%text>
               <%text>"${grpc_OUTPUT_DIR}/${RELFIL_WE}.pb.cc"</%text>
               <%text>"${grpc_OUTPUT_DIR}/${RELFIL_WE}.pb.h"</%text>
        COMMAND <%text>${_gRPC_PROTOBUF_PROTOC_EXECUTABLE}</%text>
        ARGS --grpc_out=<%text>generate_mock_code=true:${grpc_OUTPUT_DIR}</%text>
             --cpp_out=<%text>${grpc_OUTPUT_DIR}</%text>
             --plugin=protoc-gen-grpc=<%text>${_gRPC_CPP_PLUGIN_EXECUTABLE}</%text>
             -I .
             <%text>${_gRPC_PROTOBUF_INCLUDE}</%text>
             <%text>${REL_FIL}</%text>
        DEPENDS <%text>${ABS_FIL}</%text> <%text>${_gRPC_PROTOBUF_PROTOC_EXECUTABLE} ${_gRPC_CPP_PLUGIN_EXECUTABLE}</%text>
        WORKING_DIRECTORY <%text>${grpc_SOURCE_DIR}</%text>
        COMMENT "Running gRPC C++ protocol buffer compiler on <%text>${FIL}</%text>"
        VERBATIM)

        <%text>list(APPEND GRPC_PROTO_GEN "${grpc_OUTPUT_DIR}/${RELFIL_WE}.grpc.pb.cc")</%text>
        <%text>list(APPEND GRPC_PROTO_GEN "${grpc_OUTPUT_DIR}/${RELFIL_WE}.grpc.pb.h")</%text>
        <%text>list(APPEND GRPC_PROTO_GEN "${grpc_OUTPUT_DIR}/${RELFIL_WE}_mock.grpc.pb.h")</%text>
        <%text>list(APPEND GRPC_PROTO_GEN "${grpc_OUTPUT_DIR}/${RELFIL_WE}.pb.cc")</%text>
        <%text>list(APPEND GRPC_PROTO_GEN "${grpc_OUTPUT_DIR}/${RELFIL_WE}.pb.h")</%text>
        <%text>set_source_files_properties("${grpc_OUTPUT_DIR}/${RELFIL_WE}.grpc.pb.cc" "${grpc_OUTPUT_DIR}/${RELFIL_WE}.grpc.pb.h"  "${grpc_OUTPUT_DIR}/${RELFIL_WE}_mock.grpc.pb.h" "${grpc_OUTPUT_DIR}/${RELFIL_WE}.pb.cc" "${grpc_OUTPUT_DIR}/${RELFIL_WE}.pb.h" PROPERTIES GENERATED TRUE)</%text>
    endforeach()
    if (grpc_GENERATED)
      <%text>set(${grpc_GENERATED} "${GRPC_PROTO_GEN}" PARENT_SCOPE)</%text>
    endif()
  endfunction()

  % for lib in libs:
  % if lib.build in ["all", "tool"] and not lib.boringssl and not 'csharp' in lib.name and not lib.get('build_system', []) or 'cmake' in lib.get('build_system', []) and not lib.name in ['ares', 'benchmark', 'z']:  # we build these using CMake instead
  ${cc_library(lib)}
  % endif
  % endfor

  <%def name="cc_library(lib)">
  % if not any(proto_re.match(src) for src in lib.src):
  ${do_cc_library(lib)}
  % endif
  </%def>

  <%def name="do_cc_library(lib)">
  set(${lib.name}_src
  % for src in lib.src:
  % if not proto_re.match(src):
    <%text>${_gRPC_ROOT}/</%text>${src}
  % else:
    ${proto_replace_ext(src, '.pb.cc')}
    ${proto_replace_ext(src, '.grpc.pb.cc')}
    ${proto_replace_ext(src, '.pb.h')}
    ${proto_replace_ext(src, '.grpc.pb.h')}
    % if src in ["src/proto/grpc/testing/compiler_test.proto", "src/proto/grpc/testing/echo.proto"]:
    ${proto_replace_ext(src, '_mock.grpc.pb.h')}
    % endif
  % endif
  % endfor
  )
  ${'android_add_shared_library' if lib.get('dll', None) == 'only' else 'android_add_library'}(${lib.name})

  % for src in lib.src:
  % if proto_re.match(src):
  protobuf_generate_grpc_cpp(SOURCE_DIR <%text>${_gRPC_ROOT}</%text> SOURCES <%text>${_gRPC_ROOT}/</%text>${src})
  % endif
  % endfor

  target_compile_definitions(${lib.name} PRIVATE -DPB_FIELD_16BIT)
  target_compile_definitions(${lib.name} PUBLIC  -DGRPC_ALLOW_EXCEPTIONS=0)
  target_compile_options(${lib.name} PRIVATE <%text>$<$<COMPILE_LANGUAGE:C>:-std=c11></%text>)
  target_include_directories(${lib.name}
    PUBLIC  <%text>${_gRPC_ROOT}/include</%text>
    PRIVATE <%text>${_gRPC_ROOT}</%text>
    PRIVATE <%text>${_gRPC_SSL_INCLUDE_DIR}</%text>
    PRIVATE <%text>${_gRPC_BENCHMARK_INCLUDE_DIR}</%text>
    PRIVATE <%text>${_gRPC_CARES_INCLUDE_DIR}</%text>
    PRIVATE <%text>${_gRPC_GFLAGS_INCLUDE_DIR}</%text>
    PRIVATE <%text>${_gRPC_PROTOBUF_INCLUDE_DIR}</%text>
    PRIVATE <%text>${_gRPC_NANOPB_INCLUDE_DIR}</%text>
    PRIVATE <%text>${_gRPC_ADDRESS_SORTING_INCLUDE_DIR}</%text>
  % if lib.language == 'c++':
    PRIVATE <%text>${_gRPC_PROTO_GENS_DIR}</%text>
  % endif
  )

  % if len(get_deps(lib)) > 0:
  target_link_libraries(${lib.name} PRIVATE
  % for dep in get_deps(lib):
    ${dep}
  % endfor
  )
  % endif
  </%def>

  if (gRPC_BUILD_TESTS)
    add_subdirectory(tests)
  endif (gRPC_BUILD_TESTS)
